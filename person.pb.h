// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_INCLUDED_person_2eproto
#define PROTOBUF_INCLUDED_person_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_person_2eproto 

namespace protobuf_person_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_person_2eproto
class Copmany;
class CopmanyDefaultTypeInternal;
extern CopmanyDefaultTypeInternal _Copmany_default_instance_;
namespace google {
namespace protobuf {
template<> ::Copmany* Arena::CreateMaybeMessage<::Copmany>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Copmany : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Copmany) */ {
 public:
  Copmany();
  virtual ~Copmany();

  Copmany(const Copmany& from);

  inline Copmany& operator=(const Copmany& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Copmany(Copmany&& from) noexcept
    : Copmany() {
    *this = ::std::move(from);
  }

  inline Copmany& operator=(Copmany&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Copmany& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Copmany* internal_default_instance() {
    return reinterpret_cast<const Copmany*>(
               &_Copmany_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Copmany* other);
  friend void swap(Copmany& a, Copmany& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Copmany* New() const final {
    return CreateMaybeMessage<Copmany>(NULL);
  }

  Copmany* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Copmany>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Copmany& from);
  void MergeFrom(const Copmany& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Copmany* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string legal_address = 2;
  bool has_legal_address() const;
  void clear_legal_address();
  static const int kLegalAddressFieldNumber = 2;
  const ::std::string& legal_address() const;
  void set_legal_address(const ::std::string& value);
  #if LANG_CXX11
  void set_legal_address(::std::string&& value);
  #endif
  void set_legal_address(const char* value);
  void set_legal_address(const char* value, size_t size);
  ::std::string* mutable_legal_address();
  ::std::string* release_legal_address();
  void set_allocated_legal_address(::std::string* legal_address);

  // required string company_name = 3;
  bool has_company_name() const;
  void clear_company_name();
  static const int kCompanyNameFieldNumber = 3;
  const ::std::string& company_name() const;
  void set_company_name(const ::std::string& value);
  #if LANG_CXX11
  void set_company_name(::std::string&& value);
  #endif
  void set_company_name(const char* value);
  void set_company_name(const char* value, size_t size);
  ::std::string* mutable_company_name();
  ::std::string* release_company_name();
  void set_allocated_company_name(::std::string* company_name);

  // optional string type_of_activity = 4;
  bool has_type_of_activity() const;
  void clear_type_of_activity();
  static const int kTypeOfActivityFieldNumber = 4;
  const ::std::string& type_of_activity() const;
  void set_type_of_activity(const ::std::string& value);
  #if LANG_CXX11
  void set_type_of_activity(::std::string&& value);
  #endif
  void set_type_of_activity(const char* value);
  void set_type_of_activity(const char* value, size_t size);
  ::std::string* mutable_type_of_activity();
  ::std::string* release_type_of_activity();
  void set_allocated_type_of_activity(::std::string* type_of_activity);

  // required int32 year_of_foundation = 1;
  bool has_year_of_foundation() const;
  void clear_year_of_foundation();
  static const int kYearOfFoundationFieldNumber = 1;
  ::google::protobuf::int32 year_of_foundation() const;
  void set_year_of_foundation(::google::protobuf::int32 value);

  // optional bool foreign_economic_activity = 5;
  bool has_foreign_economic_activity() const;
  void clear_foreign_economic_activity();
  static const int kForeignEconomicActivityFieldNumber = 5;
  bool foreign_economic_activity() const;
  void set_foreign_economic_activity(bool value);

  // @@protoc_insertion_point(class_scope:Copmany)
 private:
  void set_has_year_of_foundation();
  void clear_has_year_of_foundation();
  void set_has_legal_address();
  void clear_has_legal_address();
  void set_has_company_name();
  void clear_has_company_name();
  void set_has_type_of_activity();
  void clear_has_type_of_activity();
  void set_has_foreign_economic_activity();
  void clear_has_foreign_economic_activity();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr legal_address_;
  ::google::protobuf::internal::ArenaStringPtr company_name_;
  ::google::protobuf::internal::ArenaStringPtr type_of_activity_;
  ::google::protobuf::int32 year_of_foundation_;
  bool foreign_economic_activity_;
  friend struct ::protobuf_person_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Copmany

// required int32 year_of_foundation = 1;
inline bool Copmany::has_year_of_foundation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Copmany::set_has_year_of_foundation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Copmany::clear_has_year_of_foundation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Copmany::clear_year_of_foundation() {
  year_of_foundation_ = 0;
  clear_has_year_of_foundation();
}
inline ::google::protobuf::int32 Copmany::year_of_foundation() const {
  // @@protoc_insertion_point(field_get:Copmany.year_of_foundation)
  return year_of_foundation_;
}
inline void Copmany::set_year_of_foundation(::google::protobuf::int32 value) {
  set_has_year_of_foundation();
  year_of_foundation_ = value;
  // @@protoc_insertion_point(field_set:Copmany.year_of_foundation)
}

// required string legal_address = 2;
inline bool Copmany::has_legal_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Copmany::set_has_legal_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Copmany::clear_has_legal_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Copmany::clear_legal_address() {
  legal_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_legal_address();
}
inline const ::std::string& Copmany::legal_address() const {
  // @@protoc_insertion_point(field_get:Copmany.legal_address)
  return legal_address_.GetNoArena();
}
inline void Copmany::set_legal_address(const ::std::string& value) {
  set_has_legal_address();
  legal_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Copmany.legal_address)
}
#if LANG_CXX11
inline void Copmany::set_legal_address(::std::string&& value) {
  set_has_legal_address();
  legal_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Copmany.legal_address)
}
#endif
inline void Copmany::set_legal_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_legal_address();
  legal_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Copmany.legal_address)
}
inline void Copmany::set_legal_address(const char* value, size_t size) {
  set_has_legal_address();
  legal_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Copmany.legal_address)
}
inline ::std::string* Copmany::mutable_legal_address() {
  set_has_legal_address();
  // @@protoc_insertion_point(field_mutable:Copmany.legal_address)
  return legal_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Copmany::release_legal_address() {
  // @@protoc_insertion_point(field_release:Copmany.legal_address)
  if (!has_legal_address()) {
    return NULL;
  }
  clear_has_legal_address();
  return legal_address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Copmany::set_allocated_legal_address(::std::string* legal_address) {
  if (legal_address != NULL) {
    set_has_legal_address();
  } else {
    clear_has_legal_address();
  }
  legal_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), legal_address);
  // @@protoc_insertion_point(field_set_allocated:Copmany.legal_address)
}

// required string company_name = 3;
inline bool Copmany::has_company_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Copmany::set_has_company_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Copmany::clear_has_company_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Copmany::clear_company_name() {
  company_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company_name();
}
inline const ::std::string& Copmany::company_name() const {
  // @@protoc_insertion_point(field_get:Copmany.company_name)
  return company_name_.GetNoArena();
}
inline void Copmany::set_company_name(const ::std::string& value) {
  set_has_company_name();
  company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Copmany.company_name)
}
#if LANG_CXX11
inline void Copmany::set_company_name(::std::string&& value) {
  set_has_company_name();
  company_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Copmany.company_name)
}
#endif
inline void Copmany::set_company_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_company_name();
  company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Copmany.company_name)
}
inline void Copmany::set_company_name(const char* value, size_t size) {
  set_has_company_name();
  company_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Copmany.company_name)
}
inline ::std::string* Copmany::mutable_company_name() {
  set_has_company_name();
  // @@protoc_insertion_point(field_mutable:Copmany.company_name)
  return company_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Copmany::release_company_name() {
  // @@protoc_insertion_point(field_release:Copmany.company_name)
  if (!has_company_name()) {
    return NULL;
  }
  clear_has_company_name();
  return company_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Copmany::set_allocated_company_name(::std::string* company_name) {
  if (company_name != NULL) {
    set_has_company_name();
  } else {
    clear_has_company_name();
  }
  company_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_name);
  // @@protoc_insertion_point(field_set_allocated:Copmany.company_name)
}

// optional string type_of_activity = 4;
inline bool Copmany::has_type_of_activity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Copmany::set_has_type_of_activity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Copmany::clear_has_type_of_activity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Copmany::clear_type_of_activity() {
  type_of_activity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_of_activity();
}
inline const ::std::string& Copmany::type_of_activity() const {
  // @@protoc_insertion_point(field_get:Copmany.type_of_activity)
  return type_of_activity_.GetNoArena();
}
inline void Copmany::set_type_of_activity(const ::std::string& value) {
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Copmany.type_of_activity)
}
#if LANG_CXX11
inline void Copmany::set_type_of_activity(::std::string&& value) {
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Copmany.type_of_activity)
}
#endif
inline void Copmany::set_type_of_activity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Copmany.type_of_activity)
}
inline void Copmany::set_type_of_activity(const char* value, size_t size) {
  set_has_type_of_activity();
  type_of_activity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Copmany.type_of_activity)
}
inline ::std::string* Copmany::mutable_type_of_activity() {
  set_has_type_of_activity();
  // @@protoc_insertion_point(field_mutable:Copmany.type_of_activity)
  return type_of_activity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Copmany::release_type_of_activity() {
  // @@protoc_insertion_point(field_release:Copmany.type_of_activity)
  if (!has_type_of_activity()) {
    return NULL;
  }
  clear_has_type_of_activity();
  return type_of_activity_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Copmany::set_allocated_type_of_activity(::std::string* type_of_activity) {
  if (type_of_activity != NULL) {
    set_has_type_of_activity();
  } else {
    clear_has_type_of_activity();
  }
  type_of_activity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_of_activity);
  // @@protoc_insertion_point(field_set_allocated:Copmany.type_of_activity)
}

// optional bool foreign_economic_activity = 5;
inline bool Copmany::has_foreign_economic_activity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Copmany::set_has_foreign_economic_activity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Copmany::clear_has_foreign_economic_activity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Copmany::clear_foreign_economic_activity() {
  foreign_economic_activity_ = false;
  clear_has_foreign_economic_activity();
}
inline bool Copmany::foreign_economic_activity() const {
  // @@protoc_insertion_point(field_get:Copmany.foreign_economic_activity)
  return foreign_economic_activity_;
}
inline void Copmany::set_foreign_economic_activity(bool value) {
  set_has_foreign_economic_activity();
  foreign_economic_activity_ = value;
  // @@protoc_insertion_point(field_set:Copmany.foreign_economic_activity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_person_2eproto
