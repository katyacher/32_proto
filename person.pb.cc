// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#include "person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CopmanyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Copmany>
      _instance;
} _Copmany_default_instance_;
namespace protobuf_person_2eproto {
static void InitDefaultsCopmany() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Copmany_default_instance_;
    new (ptr) ::Copmany();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Copmany::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Copmany =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCopmany}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Copmany.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Copmany, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Copmany, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Copmany, year_of_foundation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Copmany, legal_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Copmany, company_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Copmany, type_of_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Copmany, foreign_economic_activity_),
  3,
  0,
  1,
  2,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::Copmany)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Copmany_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "person.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014person.proto\"\217\001\n\007Copmany\022\032\n\022year_of_fo"
      "undation\030\001 \002(\005\022\025\n\rlegal_address\030\002 \002(\t\022\024\n"
      "\014company_name\030\003 \002(\t\022\030\n\020type_of_activity\030"
      "\004 \001(\t\022!\n\031foreign_economic_activity\030\005 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "person.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_person_2eproto

// ===================================================================

void Copmany::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Copmany::kYearOfFoundationFieldNumber;
const int Copmany::kLegalAddressFieldNumber;
const int Copmany::kCompanyNameFieldNumber;
const int Copmany::kTypeOfActivityFieldNumber;
const int Copmany::kForeignEconomicActivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Copmany::Copmany()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_person_2eproto::scc_info_Copmany.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Copmany)
}
Copmany::Copmany(const Copmany& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  legal_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_legal_address()) {
    legal_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legal_address_);
  }
  company_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_company_name()) {
    company_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_name_);
  }
  type_of_activity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type_of_activity()) {
    type_of_activity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_of_activity_);
  }
  ::memcpy(&year_of_foundation_, &from.year_of_foundation_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreign_economic_activity_) -
    reinterpret_cast<char*>(&year_of_foundation_)) + sizeof(foreign_economic_activity_));
  // @@protoc_insertion_point(copy_constructor:Copmany)
}

void Copmany::SharedCtor() {
  legal_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_of_activity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&year_of_foundation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreign_economic_activity_) -
      reinterpret_cast<char*>(&year_of_foundation_)) + sizeof(foreign_economic_activity_));
}

Copmany::~Copmany() {
  // @@protoc_insertion_point(destructor:Copmany)
  SharedDtor();
}

void Copmany::SharedDtor() {
  legal_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_of_activity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Copmany::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Copmany::descriptor() {
  ::protobuf_person_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_person_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Copmany& Copmany::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_person_2eproto::scc_info_Copmany.base);
  return *internal_default_instance();
}


void Copmany::Clear() {
// @@protoc_insertion_point(message_clear_start:Copmany)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      legal_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      company_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      type_of_activity_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&year_of_foundation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&foreign_economic_activity_) -
        reinterpret_cast<char*>(&year_of_foundation_)) + sizeof(foreign_economic_activity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Copmany::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Copmany)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 year_of_foundation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_year_of_foundation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_of_foundation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string legal_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legal_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->legal_address().data(), static_cast<int>(this->legal_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Copmany.legal_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string company_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_name().data(), static_cast<int>(this->company_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Copmany.company_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type_of_activity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_of_activity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_of_activity().data(), static_cast<int>(this->type_of_activity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Copmany.type_of_activity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool foreign_economic_activity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_foreign_economic_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foreign_economic_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Copmany)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Copmany)
  return false;
#undef DO_
}

void Copmany::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Copmany)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 year_of_foundation = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year_of_foundation(), output);
  }

  // required string legal_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->legal_address().data(), static_cast<int>(this->legal_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Copmany.legal_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->legal_address(), output);
  }

  // required string company_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), static_cast<int>(this->company_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Copmany.company_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->company_name(), output);
  }

  // optional string type_of_activity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_of_activity().data(), static_cast<int>(this->type_of_activity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Copmany.type_of_activity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type_of_activity(), output);
  }

  // optional bool foreign_economic_activity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->foreign_economic_activity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Copmany)
}

::google::protobuf::uint8* Copmany::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Copmany)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 year_of_foundation = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year_of_foundation(), target);
  }

  // required string legal_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->legal_address().data(), static_cast<int>(this->legal_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Copmany.legal_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legal_address(), target);
  }

  // required string company_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_name().data(), static_cast<int>(this->company_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Copmany.company_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->company_name(), target);
  }

  // optional string type_of_activity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_of_activity().data(), static_cast<int>(this->type_of_activity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Copmany.type_of_activity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type_of_activity(), target);
  }

  // optional bool foreign_economic_activity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->foreign_economic_activity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Copmany)
  return target;
}

size_t Copmany::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Copmany)
  size_t total_size = 0;

  if (has_legal_address()) {
    // required string legal_address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->legal_address());
  }

  if (has_company_name()) {
    // required string company_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_name());
  }

  if (has_year_of_foundation()) {
    // required int32 year_of_foundation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year_of_foundation());
  }

  return total_size;
}
size_t Copmany::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Copmany)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string legal_address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->legal_address());

    // required string company_name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_name());

    // required int32 year_of_foundation = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->year_of_foundation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string type_of_activity = 4;
  if (has_type_of_activity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_of_activity());
  }

  // optional bool foreign_economic_activity = 5;
  if (has_foreign_economic_activity()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Copmany::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Copmany)
  GOOGLE_DCHECK_NE(&from, this);
  const Copmany* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Copmany>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Copmany)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Copmany)
    MergeFrom(*source);
  }
}

void Copmany::MergeFrom(const Copmany& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Copmany)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_legal_address();
      legal_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legal_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_company_name();
      company_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type_of_activity();
      type_of_activity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_of_activity_);
    }
    if (cached_has_bits & 0x00000008u) {
      year_of_foundation_ = from.year_of_foundation_;
    }
    if (cached_has_bits & 0x00000010u) {
      foreign_economic_activity_ = from.foreign_economic_activity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Copmany::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Copmany)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copmany::CopyFrom(const Copmany& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Copmany)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copmany::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void Copmany::Swap(Copmany* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Copmany::InternalSwap(Copmany* other) {
  using std::swap;
  legal_address_.Swap(&other->legal_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  company_name_.Swap(&other->company_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_of_activity_.Swap(&other->type_of_activity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(year_of_foundation_, other->year_of_foundation_);
  swap(foreign_economic_activity_, other->foreign_economic_activity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Copmany::GetMetadata() const {
  protobuf_person_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_person_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Copmany* Arena::CreateMaybeMessage< ::Copmany >(Arena* arena) {
  return Arena::CreateInternal< ::Copmany >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
